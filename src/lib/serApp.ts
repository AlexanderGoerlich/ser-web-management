//#region imports
import * as hjson                       from "hjson";
import { SERReport }                    from "./serReport";
import { ISerTemplate,
         ISerConnection,
         ISerSenseSelection}            from "../node_modules/ser.api/index";
import { ISERDistribute,
         ESERDistribute,
         ISERHub,
         ISERFile,
         ISERMail }                     from "./utils";
//#endregion

export class SERApp {

    //#region private variables
    private global: EngineAPI.IGlobal;
    private defaultScriptPart: string;
    private serReport: SERReport;
    private distribute: ISERDistribute = {};
    private selection: ISerSenseSelection[] = [];
    private app: EngineAPI.IApp;
    //#endregion

    constructor(global: EngineAPI.IGlobal) {
        console.log("Constructor called: SERApp");

        this.global = global;
        this.defaultScriptPart = `
            Let resultWithTaskId = SER.START(task);
            TRACE TaskId: $(resultWithTaskId);

            Let version = SER.STATUS('');
            TRACE Version: $(version);
            TRACE Result: $(resultWithTaskId);

            Set Status = 0;
            Do while Status < 3 and Status > -1
            Let result = SER.STATUS(resultWithTaskId);
            Let Status = num#(TextBetween(result,'status":','}'))+0;
            TRACE Status: $(Status);
            Sleep 1000;
            Loop

            TRACE $(result);`;
        this.serReport = new SERReport();
    }

    /**
     * getSerJson
     */
    public getSerJson(): Promise<string> {
        console.log("fcn called: createSerScript - SERApp");

        return new Promise((resolve, reject) => {
            this.serReport.createReportConfig()
            .then((serReportProperties) => {
                try {
                    resolve(hjson.stringify(serReportProperties));
                } catch (error) {
                    Promise.reject(error);
                }
            })
            .catch((error) => {
                reject(error);
            });
        });
    }

    /**
     * initApp
     * @param app
     */
    public initApp(app?: EngineAPI.IApp):Promise<void> {
        console.log("fcn called: initApp - SERApp");

        return new Promise((resolve, reject) => {
            if (typeof(app)!=="undefined") {
                this.app = app;
                resolve();
            } else {
                this.createApplication("InitialAppWillBeRenamed")
                .then((app) => {
                    this.app = app;
                    resolve();
                })
                .catch((error) => {
                    console.log("ERROR in constructor of SERApp", error);
                    reject(error);
                });
            }
        });
    }

    /**
     * createSerScript
     * @param appName
     * @param input
     * @param obj
     */
    public createSerScript(appName: string, input: string, obj?: any): Promise<void> {
        console.log("fcn called: createSerScript - SERApp");

        return new Promise((resolve, reject) => {
            let serRepotConf;

            this.serReport.setConnection(appName);
            this.serReport.setTemplate(input);

            this.serReport.createReportConfig()
            .then((serReportProperties) => {
                serRepotConf = serReportProperties;
                return this.app.getScript();
            })
            .then((rootScript) => {
                let hstring = hjson.stringify(serRepotConf);
                rootScript += `///$tab Reporting Task\r\n///$autogenerated\r\n
                SET task = ´${hstring.substring(1, hstring.length-2)}´;
                    ${this.defaultScriptPart}
                `;
                // rootScript = "///$tab Main\r\nSET ThousandSep='.';\r\nSET DecimalSep=',';\r\nSET MoneyThousandSep='.';\r\nSET MoneyDecimalSep=',';\r\nSET MoneyFormat='#.##0,00 €;-#.##0,00 €';\r\nSET TimeFormat='hh:mm:ss';\r\nSET DateFormat='DD.MM.YYYY';\r\nSET TimestampFormat='DD.MM.YYYY hh:mm:ss[.fff]';\r\nSET FirstWeekDay=0;\r\nSET BrokenWeeks=0;\r\nSET ReferenceDay=4;\r\nSET FirstMonthOfYear=1;\r\nSET CollationLocale='de-DE';\r\nSET CreateSearchIndexOnReload=1;\r\nSET MonthNames='Jan.;Feb.;März;Apr.;Mai;Juni;Juli;Aug.;Sep.;Okt.;Nov.;Dez.';\r\nSET LongMonthNames='Januar;Februar;März;April;Mai;Juni;Juli;August;September;Oktober;November;Dezember';\r\nSET DayNames='Mo.;Di.;Mi.;Do.;Fr.;Sa.;So.';\r\nSET LongDayNames='Montag;Dienstag;Mittwoch;Donnerstag;Freitag;Samstag;Sonntag';\r\n\r\n///$tab Auto-generated section\r\n///$autogenerated\r\nSet dataManagerTables = '','Table';\r\n//This block renames script tables from non generated section which conflict with the names of managed tables\r\n\r\nFor each name in $(dataManagerTables) \r\n    Let index = 0;\r\n    Let currentName = name; \r\n    Let tableNumber = TableNumber(name); \r\n    Let matches = 0; \r\n    Do while not IsNull(tableNumber) or (index > 0 and matches > 0)\r\n        index = index + 1; \r\n        currentName = name & '-' & index; \r\n        tableNumber = TableNumber(currentName) \r\n        matches = Match('$(currentName)', $(dataManagerTables));\r\n    Loop \r\n    If index > 0 then \r\n            Rename Table '$(name)' to '$(currentName)'; \r\n    EndIf; \r\nNext; \r\nSet dataManagerTables = ;\r\n\r\n\r\nUnqualify *;\r\n\r\n[Table]:\r\nLOAD * INLINE \r\n[\r\nField_1\r\nsdfg\r\n](delimiter is ',');\r\n\r\n\r\n\r\n";
                return this.app.setScript(rootScript);
            })
            .then(() => {
                return this.app.doSave();
            })
            .then(() => {
                resolve();
            })
            .catch((error) => {
                reject(error);
            });
        });
    }

    /**
     * getContentLibraries
     */
    public getContentLibraries(): Promise<EngineAPI.IContentLibraryList> {
        console.log("fcn called: getContentLibraries - SERApp");

        return new Promise((resolve, reject) => {
            this.app.getContentLibraries()
            .then((contentLibraries) => {
                resolve(contentLibraries);
            })
            .catch((error) => {
                reject(error);
            });
        });
    }

    /**
     * loadContentForLib
     */
    public getContentForLib(libName: string): Promise<EngineAPI.IStaticContentList> {
        console.log("fcn called: loadContentForLib - SERApp");

        return new Promise((resolve, reject) => {
            this.app.getLibraryContent(libName)
            .then((content) => {
                resolve(content);
            })
            .catch((error) => {
                reject(error);
            });
        });
    }

    /**
     * setAppName
     */
    public setAppName(appName: string): Promise<void> {
        console.log("fcn called: setAppName - SERApp");

        return new Promise((resolve, reject) => {
            this.app.getAppProperties()
            .then((properties) => {
                properties.qTitle = appName;
                return this.app.setAppProperties(properties);
            })
            .then(() => {
                this.app.doSave();
            })
            .then(() => {
                resolve();
            })
            .catch((error) => {
                reject(error);
            });
        });
    }

    /**
     * loadLibs
     */
    public getConnections(): Promise<EngineAPI.IConnection[]> {
        console.log("fcn called: getConnections - SERApp");

        return new Promise((resolve, reject) => {
            this.app.getConnections()
            .then((connections) => {
                resolve(connections);
            })
            .catch((error) => {
                reject(error);
            });
        });
    }

    /**
     * addDistributeSection
     */
    public addDistributeSection(distrbuteMode: string, distribute: ISERHub | ISERFile | ISERMail) {
        console.log("fcn called: setDistribute - SERApp");

        let mode = ESERDistribute[distrbuteMode];

        switch (mode) {
            case ESERDistribute.file:
                this.distribute.file = distribute as ISERFile;
                break;
            case ESERDistribute.mail:
                this.distribute.mail = distribute as ISERMail;
                break;

            default:
                this.distribute.hub = distribute as ISERHub;
                break;
        }

        this.serReport.setDistribute(this.distribute);
    }

    /**
     * addSelectionSection
     */
    public addSelectionSection(selection: ISerSenseSelection) {
        console.log("fcn called: setDistribute - SERApp");

        this.selection.push(selection);
        this.serReport.setSelections(this.selection);
    }

    public doReload() {
        //
    }

    public loadScript() {
        //
    }


    private createApplication(appName: string): Promise<EngineAPI.IApp> {
        console.log("fcn called: createApplication - SERApp");

        return new Promise((resolve, reject) => {
            this.global.createApp(appName, "main")
            .then((app) => {
                console.log("APP", app);
                return this.global.openDoc(app.qAppId);
            })
            .then((app: EngineAPI.IApp) => {
                resolve(app);
            })
            .catch((error) => {
                console.error("ERROR in createApplication", error);
                reject(error);
            });
        });
    }
}